# This is a basic workflow to help you get started with Actions

name: Combinate

# Controls when the action will run. 
on:
  schedule:
    - cron: '0 0 1 * *'
    
  pull_request:
    branches:
      - main
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      #- name: Run a one-line script
      #  run: echo testing!

      # Runs a set of commands using the runners shell 
      - name: config
        run: |
          git pull
          git config --global user.email "AutoRobot@gmail.com"
          git config --global user.name "AutoRobot"
      
      - name: Install csh
        run: |
          sudo apt install csh
      
      - name: Main
        run: |
          pwd
          #chmod +x autorun.sh
          #./autorun.sh

         
          #./run_class

          #### 
          chmod +x ./getFile
          ./getFile
          
          #cat ./MYTV > ./MYTVs_t
          #cat ./MYTVs_t UBTV18 > ./MYTVs

          #rm -rf ./MYTVs_t

          rm -rf ./TW.ch
          rm -rf ./TW

          # Build Source 
          cp ./Old/rslt ./rslt
          cat ./Source/rtmp  ./Source/P2P ./rslt ./tw.src ./Source/SmartTV.txt  ./Source/P3P ./Source/radio ./Source/BGM > TW
          sed -i '/genre/d' ./TW

          chmod +x ./no_use
          ./no_use
      


          chmod +x ./run_class
          ./run_class

          # add catagory
          cat ./0_TW ./TW > TW0
          cat ./1_News ./TW > TW1
          cat ./2_Mix ./TW > TW2
          cat ./3_Movie ./TW > TW3
          cat ./4_Sport ./TW > TW4
          cat ./5_child ./TW > TW5

          # Cascade all 
          cat ./TW0 ./TW1 ./TW2 ./TW3 ./TW4 ./TW5 ./UBTV ./Source/P2P ./Source/bsexSmartTV ./Source/P3P ./Source/radio ./Source/BGM ./UBTV18 > TW.ch
          rm -rf TW0
          rm -rf TW1
          rm -rf TW2
          rm -rf TW3
          rm -rf TW4
          rm -rf TW5
          rm -rf ./rslt

                
          # Create Generate TXT to m3u Source
          grep -v 'test.m3u8' ./TW_allsource2 | grep -v "youtube.com" | grep -v "mitv:" | grep -v "P2p:" | grep -v "video:" | grep -v "p2p" | grep -v "p3p" > TW_txt      

          # TW_allsource Unify
          rm -rf ./TW_unify
          LANG=GBK; grep -v "#genre#" ./TW_allsource | sort -u | uniq -u > TW_unify

          LANG=GBK; sort ./Source/SmartTV.txt | uniq | sed /^$/d > smartTV


      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install dependencies
        run: pip install selenium requests futures eventlet
              
      - name: Translate from txt to m3u
        run: python ${{ github.workspace }}/txt2m3u.py
  
      - name: UpdateChannel Time 
        run: |
          echo "::set-output name=date::$(date +'%Y-%m-%d %H:%M:%S CST')" > UpdateTime
          
      - name: git add
        run: |
          git add -A
          ls -la 
          
      - name: commit & push
        run: |
          git commit -m "Link updated"
          git push
